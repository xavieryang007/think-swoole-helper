vnote_backup_file_826537664 E:/code/PHP/think-swoole-helper/2/2-1.md
# 定时器
tp-swoole当中提供定时器，允许类似crontab配置的方式，进行设置你的定时器。    
首先，需要开启定时器，配置信息在swoole.php当中。
```php
return [
    'timer'                 => true,//是否开启系统定时器
    'interval'              => 500,//系统定时器 时间间隔
];
```
其中interval表示定时器表示定时器的精度，即多长时间检测一次定时任务，时间间隔越小，资源消耗越大。

具体定时任务配置文件为timer.php,与crontab不同的是，tp-swoole的定时器支持秒级定时器，第一个参数表示秒，秒后开始和crontab一致。
```php
# Example of job definition:
# .------------------ second (0-59)
# | .---------------- minute (0 - 59)
# | | .------------- hour (0 - 23)
# | | | .---------- day of month (1 - 31)
# | | | | .------- month (1 - 12) OR jan,feb,mar,apr ...
# | | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# | | | | | |
# * * * * * *     
return [
    '*/5 * * * * *' => '\\app\\lib\\Timer',
];
```

定时器任务需要实现抽象类\think\swoole\template\Timer,需要实现两个接口，initialize为初始化方法，run为任务实现方法

```php 
<?php
namespace app\lib;

class Timer extends \think\swoole\template\Timer
{
    public function initialize($args)
    {
        var_dump('initialize');
    }

    public function run()
    {
        var_dump('hello timer');
        var_dump(time());
    }
}
```

当然也支持闭包方式的定时器，但是这种方式的定时器需要注意回收，不然反复的重复创建，造成资源不足。

```php
<?php
namespace app\index\controller;
use think\swoole\facade\Task;
use think\swoole\facade\Timer;
class Index
{
    public function hello()
    {
        //闭包方式使用定时器
        Timer::tick(1000,function(){
            var_dump(1);
        });
        //使用定时器模板
        $t=new \app\lib\TestTimer();
        Timer::tick(1000,$t);
        return 'hello,' ;
    }
}
```

